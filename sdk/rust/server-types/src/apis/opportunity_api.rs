/*
 * auction-server
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.14.0
 *
 * Generated by: https://openapi-generator.tech
 */


use {
    super::{
        configuration,
        Error,
    },
    crate::{
        apis::ResponseContent,
        models,
    },
    reqwest,
    serde::{
        Deserialize,
        Serialize,
    },
};


/// struct for typed errors of method [`delete_opportunities`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DeleteOpportunitiesError {
    Status400(models::GetBidsByTimeDeprecated400Response),
    Status404(models::ErrorBodyResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_opportunities`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetOpportunitiesError {
    Status400(models::GetBidsByTimeDeprecated400Response),
    Status404(models::ErrorBodyResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`opportunity_bid`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum OpportunityBidError {
    Status400(models::GetBidsByTimeDeprecated400Response),
    Status404(models::ErrorBodyResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`post_opportunity`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PostOpportunityError {
    Status400(models::GetBidsByTimeDeprecated400Response),
    Status404(models::ErrorBodyResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`post_quote`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PostQuoteError {
    Status400(models::GetBidsByTimeDeprecated400Response),
    Status404(models::ErrorBodyResponse),
    UnknownValue(serde_json::Value),
}


pub async fn delete_opportunities(
    configuration: &configuration::Configuration,
    opportunity_delete: models::OpportunityDelete,
) -> Result<(), Error<DeleteOpportunitiesError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/v1/opportunities", local_var_configuration.base_path);
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };
    local_var_req_builder = local_var_req_builder.json(&opportunity_delete);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<DeleteOpportunitiesError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status:  local_var_status,
            content: local_var_content,
            entity:  local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

/// depending on the mode. You need to provide `chain_id` for historical mode. Opportunities are sorted by creation time in ascending order. Total number of opportunities returned is capped by the server to preserve bandwidth.
pub async fn get_opportunities(
    configuration: &configuration::Configuration,
    chain_id: Option<&str>,
    mode: Option<models::OpportunityMode>,
    permission_key: Option<&str>,
    from_time: Option<&str>,
    limit: Option<i32>,
) -> Result<Vec<models::Opportunity>, Error<GetOpportunitiesError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/v1/opportunities", local_var_configuration.base_path);
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = chain_id {
        local_var_req_builder =
            local_var_req_builder.query(&[("chain_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = mode {
        local_var_req_builder =
            local_var_req_builder.query(&[("mode", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = permission_key {
        local_var_req_builder =
            local_var_req_builder.query(&[("permission_key", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = from_time {
        local_var_req_builder =
            local_var_req_builder.query(&[("from_time", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = limit {
        local_var_req_builder =
            local_var_req_builder.query(&[("limit", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetOpportunitiesError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status:  local_var_status,
            content: local_var_content,
            entity:  local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn opportunity_bid(
    configuration: &configuration::Configuration,
    opportunity_id: &str,
    opportunity_bid_evm: models::OpportunityBidEvm,
) -> Result<models::OpportunityBidResult, Error<OpportunityBidError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/v1/opportunities/{opportunity_id}/bids",
        local_var_configuration.base_path,
        opportunity_id = crate::apis::urlencode(opportunity_id)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.json(&opportunity_bid_evm);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<OpportunityBidError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status:  local_var_status,
            content: local_var_content,
            entity:  local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

/// The opportunity will be verified by the server. If the opportunity is valid, it will be stored in the database and will be available for bidding.
pub async fn post_opportunity(
    configuration: &configuration::Configuration,
    opportunity_create: models::OpportunityCreate,
) -> Result<models::Opportunity, Error<PostOpportunityError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/v1/opportunities", local_var_configuration.base_path);
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.json(&opportunity_create);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<PostOpportunityError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status:  local_var_status,
            content: local_var_content,
            entity:  local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

/// The server will estimate the quote price, which will be used to create an opportunity. After a certain time, searcher bids are collected, the winning signed bid will be returned along with the estimated price.
pub async fn post_quote(
    configuration: &configuration::Configuration,
    quote_create: models::QuoteCreate,
) -> Result<models::Quote, Error<PostQuoteError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/v1/opportunities/quote",
        local_var_configuration.base_path
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.json(&quote_create);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<PostQuoteError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status:  local_var_status,
            content: local_var_content,
            entity:  local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}
