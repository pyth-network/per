/*
 * auction-server
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.14.0
 *
 * Generated by: https://openapi-generator.tech
 */


use {
    super::{
        configuration,
        Error,
    },
    crate::{
        apis::ResponseContent,
        models,
    },
    reqwest,
    serde::{
        Deserialize,
        Serialize,
    },
};


/// struct for typed errors of method [`get_bid_status`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetBidStatusError {
    Status400(models::GetBidsByTimeDeprecated400Response),
    Status404(models::ErrorBodyResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_bid_status_deprecated`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetBidStatusDeprecatedError {
    Status400(models::GetBidsByTimeDeprecated400Response),
    Status404(models::ErrorBodyResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_bids_by_time`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetBidsByTimeError {
    Status400(models::GetBidsByTimeDeprecated400Response),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_bids_by_time_deprecated`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetBidsByTimeDeprecatedError {
    Status400(models::GetBidsByTimeDeprecated400Response),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`post_bid`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PostBidError {
    Status400(models::GetBidsByTimeDeprecated400Response),
    Status404(models::ErrorBodyResponse),
    UnknownValue(serde_json::Value),
}


pub async fn get_bid_status(
    configuration: &configuration::Configuration,
    chain_id: &str,
    bid_id: &str,
) -> Result<models::BidStatus, Error<GetBidStatusError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/v1/{chain_id}/bids/{bid_id}",
        local_var_configuration.base_path,
        chain_id = crate::apis::urlencode(chain_id),
        bid_id = crate::apis::urlencode(bid_id)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetBidStatusError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status:  local_var_status,
            content: local_var_content,
            entity:  local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

/// This api is deprecated and will be removed soon. Use /v1/{chain_id}/bids/{bid_id} instead.
pub async fn get_bid_status_deprecated(
    configuration: &configuration::Configuration,
    bid_id: &str,
) -> Result<models::BidStatus, Error<GetBidStatusDeprecatedError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/v1/bids/{bid_id}",
        local_var_configuration.base_path,
        bid_id = crate::apis::urlencode(bid_id)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetBidStatusDeprecatedError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status:  local_var_status,
            content: local_var_content,
            entity:  local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

/// If no time is provided, the server will return the first bids.
pub async fn get_bids_by_time(
    configuration: &configuration::Configuration,
    chain_id: &str,
    from_time: Option<&str>,
) -> Result<models::Bids, Error<GetBidsByTimeError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/v1/{chain_id}/bids",
        local_var_configuration.base_path,
        chain_id = crate::apis::urlencode(chain_id)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = from_time {
        local_var_req_builder =
            local_var_req_builder.query(&[("from_time", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetBidsByTimeError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status:  local_var_status,
            content: local_var_content,
            entity:  local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

/// If no time is provided, the server will return the first bids. This api is deprecated and will be removed soon. Use /v1/{chain_id}/bids instead.
pub async fn get_bids_by_time_deprecated(
    configuration: &configuration::Configuration,
    from_time: Option<&str>,
) -> Result<models::Bids, Error<GetBidsByTimeDeprecatedError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/v1/bids", local_var_configuration.base_path);
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = from_time {
        local_var_req_builder =
            local_var_req_builder.query(&[("from_time", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetBidsByTimeDeprecatedError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status:  local_var_status,
            content: local_var_content,
            entity:  local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Your bid will be verified by the server. Depending on the outcome of the auction, a transaction containing your bid will be sent to the blockchain expecting the bid amount to be paid in the transaction.
pub async fn post_bid(
    configuration: &configuration::Configuration,
    bid_create: models::BidCreate,
) -> Result<models::BidResult, Error<PostBidError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/v1/bids", local_var_configuration.base_path);
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.json(&bid_create);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<PostBidError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status:  local_var_status,
            content: local_var_content,
            entity:  local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}
