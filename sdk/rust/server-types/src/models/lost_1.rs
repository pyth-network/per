/*
 * auction-server
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.14.0
 *
 * Generated by: https://openapi-generator.tech
 */

use {
    crate::models,
    serde::{
        Deserialize,
        Serialize,
    },
};

/// Lost1 : The bid lost the auction. The result will be None if the auction does not result in a transaction being submitted to the chain. The result will be Some if this bid lost to another bid and the winning bid was submitted to the chain. The signature of the transaction for the submitted bid is the result value.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct Lost1 {
    #[serde(
        rename = "result",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub result: Option<Option<String>>,
    #[serde(rename = "type")]
    pub r#type: Type,
}

impl Lost1 {
    /// The bid lost the auction. The result will be None if the auction does not result in a transaction being submitted to the chain. The result will be Some if this bid lost to another bid and the winning bid was submitted to the chain. The signature of the transaction for the submitted bid is the result value.
    pub fn new(r#type: Type) -> Lost1 {
        Lost1 {
            result: None,
            r#type,
        }
    }
}
///
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "lost")]
    Lost,
}

impl Default for Type {
    fn default() -> Type {
        Self::Lost
    }
}
