/*
 * auction-server
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.14.0
 *
 * Generated by: https://openapi-generator.tech
 */

use {
    crate::models,
    serde::{
        Deserialize,
        Serialize,
    },
};

/// Lost : The bid lost the auction, which is concluded with the transaction with the given hash and index. The result will be None if the auction was concluded off-chain and no auction was submitted to the chain. The index will be None if the bid was not submitted to the chain and lost the auction by off-chain calculation. There are cases where the result is not None and the index is None. It is because other bids were selected for submission to the chain, but not this one.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct Lost {
    #[serde(
        rename = "index",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub index:  Option<Option<i32>>,
    #[serde(
        rename = "result",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub result: Option<Option<String>>,
    #[serde(rename = "type")]
    pub r#type: Type,
}

impl Lost {
    /// The bid lost the auction, which is concluded with the transaction with the given hash and index. The result will be None if the auction was concluded off-chain and no auction was submitted to the chain. The index will be None if the bid was not submitted to the chain and lost the auction by off-chain calculation. There are cases where the result is not None and the index is None. It is because other bids were selected for submission to the chain, but not this one.
    pub fn new(r#type: Type) -> Lost {
        Lost {
            index: None,
            result: None,
            r#type,
        }
    }
}
///
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "lost")]
    Lost,
}

impl Default for Type {
    fn default() -> Type {
        Self::Lost
    }
}
