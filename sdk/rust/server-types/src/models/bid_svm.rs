/*
 * auction-server
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.14.0
 *
 * Generated by: https://openapi-generator.tech
 */

use {
    crate::models,
    serde::{
        Deserialize,
        Serialize,
    },
};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct BidSvm {
    /// The chain id for bid.
    #[serde(rename = "chain_id")]
    pub chain_id:        String,
    /// The unique id for bid.
    #[serde(rename = "id")]
    pub id:              String,
    /// The time server received the bid formatted in rfc3339.
    #[serde(rename = "initiation_time")]
    pub initiation_time: String,
    /// The profile id for the bid owner.
    #[serde(rename = "profile_id")]
    pub profile_id:      String,
    /// Amount of bid in lamports.
    #[serde(rename = "bid_amount")]
    pub bid_amount:      i64,
    /// The permission key for bid in base64 format. This is the concatenation of the permission account and the router account.
    #[serde(rename = "permission_key")]
    pub permission_key:  String,
    #[serde(rename = "status")]
    pub status:          models::BidStatusSvm,
    /// The transaction of the bid.
    #[serde(rename = "transaction")]
    pub transaction:     String,
}

impl BidSvm {
    pub fn new(
        chain_id: String,
        id: String,
        initiation_time: String,
        profile_id: String,
        bid_amount: i64,
        permission_key: String,
        status: models::BidStatusSvm,
        transaction: String,
    ) -> BidSvm {
        BidSvm {
            chain_id,
            id,
            initiation_time,
            profile_id,
            bid_amount,
            permission_key,
            status,
            transaction,
        }
    }
}
