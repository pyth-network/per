/*
 * auction-server
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.14.0
 *
 * Generated by: https://openapi-generator.tech
 */

use {
    crate::models,
    serde::{
        Deserialize,
        Serialize,
    },
};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct V16 {
    /// The chain id for creating the quote.
    #[serde(rename = "chain_id")]
    pub chain_id:                    String,
    /// The input token amount that the user wants to swap.
    #[serde(rename = "input_token_amount")]
    pub input_token_amount:          i64,
    /// The token mint address of the input token.
    #[serde(rename = "input_token_mint")]
    pub input_token_mint:            String,
    /// The maximum slippage percentage that the user is willing to accept.
    #[serde(rename = "maximum_slippage_percentage")]
    pub maximum_slippage_percentage: f64,
    /// The token mint address of the output token.
    #[serde(rename = "output_token_mint")]
    pub output_token_mint:           String,
    /// The user wallet address which requested the quote from the wallet.
    #[serde(rename = "user_wallet_address")]
    pub user_wallet_address:         String,
    #[serde(rename = "program")]
    pub program:                     Program,
    #[serde(rename = "version")]
    pub version:                     Version,
}

impl V16 {
    pub fn new(
        chain_id: String,
        input_token_amount: i64,
        input_token_mint: String,
        maximum_slippage_percentage: f64,
        output_token_mint: String,
        user_wallet_address: String,
        program: Program,
        version: Version,
    ) -> V16 {
        V16 {
            chain_id,
            input_token_amount,
            input_token_mint,
            maximum_slippage_percentage,
            output_token_mint,
            user_wallet_address,
            program,
            version,
        }
    }
}
///
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Program {
    #[serde(rename = "phantom")]
    Phantom,
}

impl Default for Program {
    fn default() -> Program {
        Self::Phantom
    }
}
///
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Version {
    #[serde(rename = "v1")]
    V1,
}

impl Default for Version {
    fn default() -> Version {
        Self::V1
    }
}
