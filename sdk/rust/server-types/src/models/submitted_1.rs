/*
 * auction-server
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.14.0
 *
 * Generated by: https://openapi-generator.tech
 */

use {
    crate::models,
    serde::{
        Deserialize,
        Serialize,
    },
};

/// Submitted1 : The bid won the auction and was submitted to the chain, with the transaction with the signature. This state is temporary and will be updated to either Won or Failed after the transaction is included in a block, or Expired if the transaction expires before it is included.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct Submitted1 {
    #[serde(rename = "result")]
    pub result: String,
    #[serde(rename = "type")]
    pub r#type: Type,
}

impl Submitted1 {
    /// The bid won the auction and was submitted to the chain, with the transaction with the signature. This state is temporary and will be updated to either Won or Failed after the transaction is included in a block, or Expired if the transaction expires before it is included.
    pub fn new(result: String, r#type: Type) -> Submitted1 {
        Submitted1 { result, r#type }
    }
}
///
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "submitted")]
    Submitted,
}

impl Default for Type {
    fn default() -> Type {
        Self::Submitted
    }
}
