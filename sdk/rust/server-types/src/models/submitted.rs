/*
 * auction-server
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.14.0
 *
 * Generated by: https://openapi-generator.tech
 */

use {
    crate::models,
    serde::{
        Deserialize,
        Serialize,
    },
};

/// Submitted : The bid is submitted to the chain, which is placed at the given index of the transaction with the given hash. This state is temporary and will be updated to either lost or won after conclusion of the auction.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct Submitted {
    #[serde(rename = "index")]
    pub index:  i32,
    #[serde(rename = "result")]
    pub result: String,
    #[serde(rename = "type")]
    pub r#type: Type,
}

impl Submitted {
    /// The bid is submitted to the chain, which is placed at the given index of the transaction with the given hash. This state is temporary and will be updated to either lost or won after conclusion of the auction.
    pub fn new(index: i32, result: String, r#type: Type) -> Submitted {
        Submitted {
            index,
            result,
            r#type,
        }
    }
}
///
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "submitted")]
    Submitted,
}

impl Default for Type {
    fn default() -> Type {
        Self::Submitted
    }
}
