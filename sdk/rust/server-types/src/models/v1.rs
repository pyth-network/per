/*
 * auction-server
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.14.0
 *
 * Generated by: https://openapi-generator.tech
 */

use {
    crate::models,
    serde::{
        Deserialize,
        Serialize,
    },
};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct V1 {
    #[serde(rename = "buy_tokens")]
    pub buy_tokens:        Vec<models::TokenAmountEvm>,
    /// The chain id where the opportunity will be executed.
    #[serde(rename = "chain_id")]
    pub chain_id:          String,
    /// The permission key required for successful execution of the opportunity.
    #[serde(rename = "permission_key")]
    pub permission_key:    String,
    #[serde(rename = "sell_tokens")]
    pub sell_tokens:       Vec<models::TokenAmountEvm>,
    /// The value to send with the contract call.
    #[serde(rename = "target_call_value")]
    pub target_call_value: String,
    /// Calldata for the target contract call.
    #[serde(rename = "target_calldata")]
    pub target_calldata:   String,
    /// The contract address to call for execution of the opportunity.
    #[serde(rename = "target_contract")]
    pub target_contract:   String,
    #[serde(rename = "version")]
    pub version:           Version,
}

impl V1 {
    pub fn new(
        buy_tokens: Vec<models::TokenAmountEvm>,
        chain_id: String,
        permission_key: String,
        sell_tokens: Vec<models::TokenAmountEvm>,
        target_call_value: String,
        target_calldata: String,
        target_contract: String,
        version: Version,
    ) -> V1 {
        V1 {
            buy_tokens,
            chain_id,
            permission_key,
            sell_tokens,
            target_call_value,
            target_calldata,
            target_contract,
            version,
        }
    }
}
///
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Version {
    #[serde(rename = "v1")]
    V1,
}

impl Default for Version {
    fn default() -> Version {
        Self::V1
    }
}
