/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/v1/bids": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Returns at most 20 bids which were submitted after a specific time.
     * @deprecated
     * @description If no time is provided, the server will return the first bids.
     *     This api is deprecated and will be removed soon. Use /v1/{chain_id}/bids instead.
     */
    get: operations["get_bids_by_time_deprecated"];
    put?: never;
    /**
     * Bid on a specific permission key for a specific chain.
     * @description Your bid will be verified by the server. Depending on the outcome of the auction, a transaction
     *     containing your bid will be sent to the blockchain expecting the bid amount to be paid in the transaction.
     */
    post: operations["post_bid"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/bids/{bid_id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Query the status of a specific bid.
     * @deprecated
     * @description This api is deprecated and will be removed soon. Use /v1/{chain_id}/bids/{bid_id} instead.
     */
    get: operations["get_bid_status_deprecated"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/opportunities": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Fetch opportunities ready for execution or historical opportunities
     *     depending on the mode.
     * @description You need to provide `chain_id` for historical mode.
     *     Opportunities are sorted by creation time in ascending order.
     *     Total number of opportunities returned is capped by the server to preserve bandwidth.
     */
    get: operations["get_opportunities"];
    put?: never;
    /**
     * Submit an opportunity ready to be executed.
     * @description The opportunity will be verified by the server. If the opportunity is valid, it will be stored in the database
     *     and will be available for bidding.
     */
    post: operations["post_opportunity"];
    /** Delete all opportunities for specified data. */
    delete: operations["delete_opportunities"];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/opportunities/quote": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Submit a quote request.
     * @description The server will create an opportunity and receive searcher bids
     *     After a certain time, the winning bid will be returned as the response.
     */
    post: operations["post_quote"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/opportunities/{opportunity_id}/bids": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Bid on opportunity. */
    post: operations["opportunity_bid"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/profiles/access_tokens": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    /**
     * Revoke the authenticated profile access token.
     * @description Returns empty response.
     */
    delete: operations["delete_profile_access_token"];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/{chain_id}/bids": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Returns at most 20 bids which were submitted after a specific time and chain.
     *     If no time is provided, the server will return the first bids. */
    get: operations["get_bids_by_time"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/{chain_id}/bids/{bid_id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Query the status of a specific bid. */
    get: operations["get_bid_status"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/{chain_id}/bids/{bid_id}/cancel": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Cancel a specific bid.
     * @description Bids can only be cancelled if they are in the awaiting signature state.
     *     Only the user who created the bid can cancel it.
     */
    post: operations["post_cancel_bid"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/{chain_id}/quotes/submit": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Signs and submits the transaction for the specified quote.
     * @description Server will verify the quote and checks if the quote is still valid.
     *     If the quote is valid, the server will submit the transaction to the blockchain.
     */
    post: operations["post_submit_quote"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
}
export type webhooks = Record<string, never>;
export interface components {
  schemas: {
    APIResponse: components["schemas"]["BidResult"];
    Bid: components["schemas"]["BidEvm"] | components["schemas"]["BidSvm"];
    BidCancel: components["schemas"]["BidCancelSvm"];
    BidCancelSvm: {
      /**
       * @description The id of the bid to cancel.
       * @example obo3ee3e-58cc-4372-a567-0e02b2c3d479
       */
      bid_id: string;
      /**
       * @description The chain id of the bid to cancel.
       * @example solana
       */
      chain_id: string;
    };
    BidCreate:
      | components["schemas"]["BidCreateEvm"]
      | components["schemas"]["BidCreateSvm"];
    BidCreateEvm: {
      /**
       * @description Amount of bid in wei.
       * @example 10
       */
      amount: string;
      /**
       * @description The chain id to bid on.
       * @example op_sepolia
       */
      chain_id: string;
      /**
       * @description The permission key to bid on.
       * @example 0xdeadbeef
       */
      permission_key: string;
      /**
       * @description Calldata for the contract call.
       * @example 0xdeadbeef
       */
      target_calldata: string;
      /**
       * @description The contract address to call.
       * @example 0xcA11bde05977b3631167028862bE2a173976CA11
       */
      target_contract: string;
    };
    BidCreateOnChainSvm: {
      /**
       * @description The chain id to bid on.
       * @example solana
       */
      chain_id: string;
      /**
       * Format: int64
       * @description The minimum slot required for the bid to be executed successfully
       *     None if the bid can be executed at any recent slot
       * @example 293106477
       */
      slot?: number | null;
      /**
       * @description The transaction for bid.
       * @example SGVsbG8sIFdvcmxkIQ==
       */
      transaction: string;
    };
    BidCreateSvm:
      | components["schemas"]["BidCreateSwapSvm"]
      | components["schemas"]["BidCreateOnChainSvm"];
    BidCreateSwapSvm: {
      /**
       * @description The chain id to bid on.
       * @example solana
       */
      chain_id: string;
      /**
       * @description The id of the swap opportunity to bid on.
       * @example obo3ee3e-58cc-4372-a567-0e02b2c3d479
       */
      opportunity_id: string;
      /**
       * @description The transaction for bid.
       * @example SGVsbG8sIFdvcmxkIQ==
       */
      transaction: string;
      /** @description The bid type. Should be "swap" */
      type: components["schemas"]["BidCreateSwapSvmTag"];
    };
    /** @enum {string} */
    BidCreateSwapSvmTag: "swap";
    BidEvm: {
      /**
       * @description The chain id for bid.
       * @example op_sepolia
       */
      chain_id: string;
      /**
       * @description The unique id for bid.
       * @example obo3ee3e-58cc-4372-a567-0e02b2c3d479
       */
      id: string;
      /**
       * @description The time server received the bid formatted in rfc3339.
       * @example 2024-05-23T21:26:57.329954Z
       */
      initiation_time: string;
      /**
       * @description The profile id for the bid owner.
       * @example obo3ee3e-58cc-4372-a567-0e02b2c3d479
       */
      profile_id: string;
    } & {
      /**
       * @description Amount of bid in wei.
       * @example 10
       */
      bid_amount: string;
      /**
       * @description The gas limit for the contract call.
       * @example 2000000
       */
      gas_limit: string;
      /**
       * @description The permission key for bid.
       * @example 0xdeadbeef
       */
      permission_key: string;
      /** @description The latest status for bid. */
      status: components["schemas"]["BidStatusEvm"];
      /**
       * @description Calldata for the contract call.
       * @example 0xdeadbeef
       */
      target_calldata: string;
      /**
       * @description The contract address to call.
       * @example 0xcA11bde05977b3631167028862bE2a173976CA11
       */
      target_contract: string;
    };
    BidResult: {
      /**
       * @description The unique id created to identify the bid. This id can be used to query the status of the bid.
       * @example beedbeed-58cc-4372-a567-0e02b2c3d479
       */
      id: string;
      /**
       * @description The status of the request. If the bid was placed successfully, the status will be "OK".
       * @example OK
       */
      status: string;
    };
    BidStatus:
      | components["schemas"]["BidStatusSvm"]
      | components["schemas"]["BidStatusEvm"];
    BidStatusEvm:
      | {
          /** @enum {string} */
          type: "pending";
        }
      | {
          /**
           * Format: int32
           * @example 1
           */
          index: number;
          /** @example 0x103d4fbd777a36311b5161f2062490f761f25b67406badb2bace62bb170aa4e3 */
          result: string;
          /** @enum {string} */
          type: "submitted";
        }
      | {
          /**
           * Format: int32
           * @example 1
           */
          index?: number | null;
          /** @example 0x103d4fbd777a36311b5161f2062490f761f25b67406badb2bace62bb170aa4e3 */
          result?: string | null;
          /** @enum {string} */
          type: "lost";
        }
      | {
          /**
           * Format: int32
           * @example 1
           */
          index: number;
          /** @example 0x103d4fbd777a36311b5161f2062490f761f25b67406badb2bace62bb170aa4e3 */
          result: string;
          /** @enum {string} */
          type: "won";
        };
    BidStatusSvm:
      | {
          /** @enum {string} */
          type: "pending";
        }
      | {
          /** @example Jb2urXPyEh4xiBgzYvwEFe4q1iMxG1DNxWGGQg94AmKgqFTwLAiTiHrYiYxwHUB4DV8u5ahNEVtMMDm3sNSRdTg */
          result: string;
          /** @enum {string} */
          type: "awaiting_signature";
        }
      | {
          /** @example Jb2urXPyEh4xiBgzYvwEFe4q1iMxG1DNxWGGQg94AmKgqFTwLAiTiHrYiYxwHUB4DV8u5ahNEVtMMDm3sNSRdTg */
          result?: string | null;
          /** @enum {string} */
          type: "lost";
        }
      | {
          /** @example Jb2urXPyEh4xiBgzYvwEFe4q1iMxG1DNxWGGQg94AmKgqFTwLAiTiHrYiYxwHUB4DV8u5ahNEVtMMDm3sNSRdTg */
          result: string;
          /** @enum {string} */
          type: "sent_to_user_for_submission";
        }
      | {
          /** @example Jb2urXPyEh4xiBgzYvwEFe4q1iMxG1DNxWGGQg94AmKgqFTwLAiTiHrYiYxwHUB4DV8u5ahNEVtMMDm3sNSRdTg */
          result: string;
          /** @enum {string} */
          type: "submitted";
        }
      | {
          /** @example Jb2urXPyEh4xiBgzYvwEFe4q1iMxG1DNxWGGQg94AmKgqFTwLAiTiHrYiYxwHUB4DV8u5ahNEVtMMDm3sNSRdTg */
          result: string;
          /** @enum {string} */
          type: "won";
        }
      | {
          /** @example Jb2urXPyEh4xiBgzYvwEFe4q1iMxG1DNxWGGQg94AmKgqFTwLAiTiHrYiYxwHUB4DV8u5ahNEVtMMDm3sNSRdTg */
          result: string;
          /** @enum {string} */
          type: "failed";
        }
      | {
          /** @example Jb2urXPyEh4xiBgzYvwEFe4q1iMxG1DNxWGGQg94AmKgqFTwLAiTiHrYiYxwHUB4DV8u5ahNEVtMMDm3sNSRdTg */
          result: string;
          /** @enum {string} */
          type: "expired";
        }
      | {
          /** @example Jb2urXPyEh4xiBgzYvwEFe4q1iMxG1DNxWGGQg94AmKgqFTwLAiTiHrYiYxwHUB4DV8u5ahNEVtMMDm3sNSRdTg */
          result: string;
          /** @enum {string} */
          type: "cancelled";
        }
      | {
          reason: components["schemas"]["SubmissionFailedReason"];
          /** @example Jb2urXPyEh4xiBgzYvwEFe4q1iMxG1DNxWGGQg94AmKgqFTwLAiTiHrYiYxwHUB4DV8u5ahNEVtMMDm3sNSRdTg */
          result: string;
          /** @enum {string} */
          type: "submission_failed";
        };
    BidStatusWithId: {
      bid_status: components["schemas"]["BidStatus"];
      id: string;
    };
    BidSvm: {
      /**
       * @description The chain id for bid.
       * @example op_sepolia
       */
      chain_id: string;
      /**
       * @description The unique id for bid.
       * @example obo3ee3e-58cc-4372-a567-0e02b2c3d479
       */
      id: string;
      /**
       * @description The time server received the bid formatted in rfc3339.
       * @example 2024-05-23T21:26:57.329954Z
       */
      initiation_time: string;
      /**
       * @description The profile id for the bid owner.
       * @example obo3ee3e-58cc-4372-a567-0e02b2c3d479
       */
      profile_id: string;
    } & {
      /**
       * Format: int64
       * @description Amount of bid in lamports.
       * @example 1000
       */
      bid_amount: number;
      /**
       * @description The permission key for bid in base64 format.
       *     This is the concatenation of the opportunity type, the router, and the permission account.
       * @example DUcTi3rDyS5QEmZ4BNRBejtArmDCWaPYGfN44vBJXKL5
       */
      permission_key: string;
      /** @description The latest status for bid. */
      status: components["schemas"]["BidStatusSvm"];
      /**
       * @description The transaction of the bid.
       * @example SGVsbG8sIFdvcmxkIQ==
       */
      transaction: string;
    };
    Bids: {
      items: components["schemas"]["Bid"][];
    };
    ClientMessage:
      | {
          /** @enum {string} */
          method: "subscribe";
          params: {
            chain_ids: string[];
          };
        }
      | {
          /** @enum {string} */
          method: "unsubscribe";
          params: {
            chain_ids: string[];
          };
        }
      | {
          /** @enum {string} */
          method: "post_bid";
          params: {
            bid: components["schemas"]["BidCreate"];
          };
        }
      | {
          /** @enum {string} */
          method: "post_opportunity_bid";
          params: {
            opportunity_bid: components["schemas"]["OpportunityBidEvm"];
            opportunity_id: string;
          };
        }
      | {
          /** @enum {string} */
          method: "cancel_bid";
          params: {
            data: components["schemas"]["BidCancel"];
          };
        };
    ClientRequest: components["schemas"]["ClientMessage"] & {
      id: string;
    };
    ErrorBodyResponse: {
      error: string;
    };
    /** @enum {string} */
    FeeToken: "searcher_token" | "user_token";
    Opportunity:
      | components["schemas"]["OpportunityEvm"]
      | components["schemas"]["OpportunitySvm"];
    OpportunityBidEvm: {
      /**
       * @description The bid amount in wei.
       * @example 1000000000000000000
       */
      amount: string;
      /**
       * @description The latest unix timestamp in seconds until which the bid is valid.
       * @example 1000000000000000000
       */
      deadline: string;
      /**
       * @description The executor address.
       * @example 0x5FbDB2315678afecb367f032d93F642f64180aa2
       */
      executor: string;
      /**
       * @description The nonce of the bid permit signature.
       * @example 123
       */
      nonce: string;
      /**
       * @description The opportunity permission key.
       * @example 0xdeadbeefcafe
       */
      permission_key: string;
      /** @example 0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef12 */
      signature: string;
    };
    OpportunityBidResult: {
      /**
       * @description The unique id created to identify the bid. This id can be used to query the status of the bid.
       * @example beedbeed-58cc-4372-a567-0e02b2c3d479
       */
      id: string;
      /** @example OK */
      status: string;
    };
    /** @description The input type for creating a new opportunity. */
    OpportunityCreate:
      | components["schemas"]["OpportunityCreateEvm"]
      | components["schemas"]["OpportunityCreateSvm"];
    OpportunityCreateEvm: components["schemas"]["OpportunityCreateV1Evm"] & {
      /** @enum {string} */
      version: "v1";
    };
    /** @description Program specific parameters for the opportunity. */
    OpportunityCreateProgramParamsV1Svm: {
      /**
       * @description The Limo order to be executed, encoded in base64.
       * @example UxMUbQAsjrfQUp5stVwMJ6Mucq7VWTvt4ICe69BJ8lVXqwM+0sysV8OqZTdM0W4p...
       */
      order: string;
      /**
       * @description Address of the order account.
       * @example DUcTi3rDyS5QEmZ4BNRBejtArmDCWaPYGfN44vBJXKL5
       */
      order_address: string;
      /** @enum {string} */
      program: "limo";
    };
    OpportunityCreateSvm: components["schemas"]["OpportunityCreateV1Svm"] & {
      /** @enum {string} */
      version: "v1";
    };
    /** @description Opportunity parameters needed for on-chain execution.
     *     If a searcher signs the opportunity and have approved enough tokens to opportunity adapter,
     *     by calling this target contract with the given target calldata and structures, they will
     *     send the tokens specified in the `sell_tokens` field and receive the tokens specified in the `buy_tokens` field. */
    OpportunityCreateV1Evm: {
      buy_tokens: components["schemas"]["TokenAmountEvm"][];
      /**
       * @description The chain id where the opportunity will be executed.
       * @example op_sepolia
       */
      chain_id: string;
      /**
       * @description The permission key required for successful execution of the opportunity.
       * @example 0xdeadbeefcafe
       */
      permission_key: string;
      sell_tokens: components["schemas"]["TokenAmountEvm"][];
      /**
       * @description The value to send with the contract call.
       * @example 1
       */
      target_call_value: string;
      /**
       * @description Calldata for the target contract call.
       * @example 0xdeadbeef
       */
      target_calldata: string;
      /**
       * @description The contract address to call for execution of the opportunity.
       * @example 0xcA11bde05977b3631167028862bE2a173976CA11
       */
      target_contract: string;
    };
    /** @description Opportunity parameters needed for on-chain execution.
     *     Parameters may differ for each program. */
    OpportunityCreateV1Svm: {
      /**
       * @description The Limo order to be executed, encoded in base64.
       * @example UxMUbQAsjrfQUp5stVwMJ6Mucq7VWTvt4ICe69BJ8lVXqwM+0sysV8OqZTdM0W4p...
       */
      order: string;
      /**
       * @description Address of the order account.
       * @example DUcTi3rDyS5QEmZ4BNRBejtArmDCWaPYGfN44vBJXKL5
       */
      order_address: string;
      /** @enum {string} */
      program: "limo";
    } & {
      buy_tokens: components["schemas"]["TokenAmountSvm"][];
      /**
       * @description The chain id where the opportunity will be executed.
       * @example solana
       */
      chain_id: string;
      /**
       * @description The permission account to be permitted by the ER contract for the opportunity execution of the protocol.
       * @example DUcTi3rDyS5QEmZ4BNRBejtArmDCWaPYGfN44vBJXKL5
       */
      permission_account: string;
      /**
       * @description The router account to be used for the opportunity execution of the protocol.
       * @example DUcTi3rDyS5QEmZ4BNRBejtArmDCWaPYGfN44vBJXKL5
       */
      router: string;
      sell_tokens: components["schemas"]["TokenAmountSvm"][];
      /**
       * Format: int64
       * @description The slot where the program params were fetched from using the RPC.
       * @example 293106477
       */
      slot: number;
    };
    /** @description The input type for deleting opportunities. */
    OpportunityDelete:
      | (components["schemas"]["OpportunityDeleteSvm"] & {
          /** @enum {string} */
          chain_type: "svm";
        })
      | (components["schemas"]["OpportunityDeleteEvm"] & {
          /** @enum {string} */
          chain_type: "evm";
        });
    OpportunityDeleteEvm: components["schemas"]["OpportunityDeleteV1Evm"] & {
      /** @enum {string} */
      version: "v1";
    };
    OpportunityDeleteSvm: components["schemas"]["OpportunityDeleteV1Svm"] & {
      /** @enum {string} */
      version: "v1";
    };
    /** @description Opportunity parameters needed for deleting live opportunities. */
    OpportunityDeleteV1Evm: {
      /**
       * @description The chain id for the opportunity.
       * @example solana
       */
      chain_id: string;
      /**
       * @description The permission key of the opportunity.
       * @example 0xdeadbeefcafe
       */
      permission_key: string;
    };
    /** @description Opportunity parameters needed for deleting live opportunities. */
    OpportunityDeleteV1Svm: {
      /**
       * @description The chain id for the opportunity.
       * @example solana
       */
      chain_id: string;
      /**
       * @description The permission account for the opportunity.
       * @example DUcTi3rDyS5QEmZ4BNRBejtArmDCWaPYGfN44vBJXKL5
       */
      permission_account: string;
      /** @description The program for the opportunity. */
      program: components["schemas"]["ProgramSvm"];
      /**
       * @description The router account for the opportunity.
       * @example DUcTi3rDyS5QEmZ4BNRBejtArmDCWaPYGfN44vBJXKL5
       */
      router: string;
    };
    OpportunityEvm: (components["schemas"]["OpportunityParamsV1Evm"] & {
      /** @enum {string} */
      version: "v1";
    }) & {
      /**
       * @description Creation time of the opportunity (in microseconds since the Unix epoch).
       * @example 1700000000000000
       */
      creation_time: number;
      /**
       * @description The opportunity unique id.
       * @example obo3ee3e-58cc-4372-a567-0e02b2c3d479
       */
      opportunity_id: string;
    };
    /** @enum {string} */
    OpportunityMode: "live" | "historical";
    OpportunityParamsEvm: components["schemas"]["OpportunityParamsV1Evm"] & {
      /** @enum {string} */
      version: "v1";
    };
    OpportunityParamsSvm: components["schemas"]["OpportunityParamsV1Svm"] & {
      /** @enum {string} */
      version: "v1";
    };
    OpportunityParamsV1Evm: components["schemas"]["OpportunityCreateV1Evm"];
    /** @description Opportunity parameters needed for on-chain execution.
     *     Parameters may differ for each program. */
    OpportunityParamsV1Svm: (
      | {
          /**
           * @description The Limo order to be executed, encoded in base64.
           * @example UxMUbQAsjrfQUp5stVwMJ6Mucq7VWTvt4ICe69BJ8lVXqwM+0sysV8OqZTdM0W4p...
           */
          order: string;
          /**
           * @description Address of the order account.
           * @example DUcTi3rDyS5QEmZ4BNRBejtArmDCWaPYGfN44vBJXKL5
           */
          order_address: string;
          /** @enum {string} */
          program: "limo";
          /**
           * Format: int64
           * @description The slot where the opportunity params were fetched from using the RPC.
           * @example 293106477
           */
          slot: number;
        }
      | {
          /**
           * @description If true, bids to this opportunity can be cancelled by the searcher.
           * @example true
           */
          cancellable: boolean;
          /** @description Specifies whether the fees are to be paid in the searcher or user token. */
          fee_token: components["schemas"]["FeeToken"];
          /**
           * @description If provided, this memo must be included in the bid transaction as a Memo program instruction.
           * @example memo
           */
          memo?: string | null;
          /**
           * Format: int64
           * @description The minimum acceptable deadline for the quote, in seconds since the Unix epoch.
           *     The transaction must have a deadline greater than this value.
           * @example 17000000000
           */
          minimum_deadline: number;
          /**
           * @description The permission account that serves as an identifier for the swap opportunity.
           * @example DUcTi3rDyS5QEmZ4BNRBejtArmDCWaPYGfN44vBJXKL5
           */
          permission_account: string;
          /**
           * Format: int64
           * @description The platform fee in basis points.
           * @example 10
           */
          platform_fee_bps: number;
          /** @enum {string} */
          program: "swap";
          /**
           * Format: int32
           * @description The referral fee in basis points.
           * @example 10
           */
          referral_fee_bps: number;
          /**
           * @description The router account to be used for the opportunity execution of the protocol.
           * @example DUcTi3rDyS5QEmZ4BNRBejtArmDCWaPYGfN44vBJXKL5
           */
          router_account: string;
          /** @description Details about which token accounts need to be initialized and by whom */
          token_account_initialization_configs: components["schemas"]["TokenAccountInitializationConfigs"];
          /** @description Details about the tokens to be swapped. Either the searcher token amount or the user token amount must be specified. */
          tokens: components["schemas"]["QuoteTokens"] & {
            /**
             * @description The token program of the searcher mint.
             * @example TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA
             */
            token_program_searcher: string;
            /**
             * @description The token program of the user mint.
             * @example TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA
             */
            token_program_user: string;
          };
          /**
           * Format: int64
           * @description The user's current balance of the user-provided token
           * @example 10
           */
          user_mint_user_balance: number;
          /**
           * @description The user wallet address which requested the quote from the wallet.
           * @example DUcTi3rDyS5QEmZ4BNRBejtArmDCWaPYGfN44vBJXKL5
           */
          user_wallet_address: string;
        }
    ) & {
      /** @example solana */
      chain_id: string;
    };
    OpportunitySvm: (components["schemas"]["OpportunityParamsV1Svm"] & {
      /** @enum {string} */
      version: "v1";
    }) & {
      /**
       * @description Creation time of the opportunity (in microseconds since the Unix epoch).
       * @example 1700000000000000
       */
      creation_time: number;
      /**
       * @description The opportunity unique id.
       * @example obo3ee3e-58cc-4372-a567-0e02b2c3d479
       */
      opportunity_id: string;
    };
    /** @enum {string} */
    ProgramSvm: "swap" | "limo";
    Quote: components["schemas"]["QuoteSvm"];
    QuoteCreate: components["schemas"]["QuoteCreateSvm"];
    QuoteCreateSvm: components["schemas"]["QuoteCreateV1SvmParams"] & {
      /** @enum {string} */
      version: "v1";
    };
    /** @description Parameters needed to create a new opportunity from the swap request. */
    QuoteCreateV1SvmParams: {
      /**
       * @description Whether the quote is cancellable by the searcher between the time the quote is requested and the time the quote is signed and submitted back.
       *     For cancellable quotes, the quote needs to be signed and submitted back to the API. If the quote is not cancellable, the user may broadcast the transaction to the blockchain on their own instead of submitting it back to the API.
       *     Therefore cancellable quotes allow the integrator to reduce the number of API calls to one, but at the cost of potentially worse prices. Price-optimizing integrators should use the default value of false.
       * @example true
       */
      cancellable?: boolean;
      /**
       * @description The chain id for creating the quote.
       * @example solana
       */
      chain_id: string;
      /**
       * @description The mint address of the token the user will provide in the swap.
       * @example EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v
       */
      input_token_mint: string;
      /**
       * @description Optional memo to be included in the transaction.
       * @example memo
       */
      memo?: string | null;
      /**
       * Format: int32
       * @description Optional minimum transaction lifetime in seconds.
       * @example 10
       */
      minimum_lifetime?: number | null;
      /**
       * @description The mint address of the token the user will receive in the swap.
       * @example EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v
       */
      output_token_mint: string;
      /** @description Information about the referral fee and the router to send the fee to. If not provided, referral fee will be set to 0. */
      referral_fee_info?: null | {
        /**
         * Format: int32
         * @description The referral fee in basis points.
         * @example 10
         */
        referral_fee_bps: number;
        /**
         * @description The router account to send referral fees to.
         * @example DUcTi3rDyS5QEmZ4BNRBejtArmDCWaPYGfN44vBJXKL5
         */
        router: string;
      };
      /** @description The token amount that the user wants to swap out of/into. */
      specified_token_amount:
        | {
            /**
             * Format: int64
             * @example 100
             */
            amount: number;
            /** @enum {string} */
            side: "input";
          }
        | {
            /**
             * Format: int64
             * @example 50
             */
            amount: number;
            /** @enum {string} */
            side: "output";
          };
      /**
       * @description The user wallet address which requested the quote from the wallet. If not provided, an indicative price without a transaction will be returned.
       * @example DUcTi3rDyS5QEmZ4BNRBejtArmDCWaPYGfN44vBJXKL5
       */
      user_wallet_address?: string | null;
    };
    QuoteSvm: components["schemas"]["QuoteV1Svm"] & {
      /** @enum {string} */
      version: "v1";
    };
    QuoteTokens:
      | {
          /**
           * Format: int64
           * @description The exact amount that the searcher will provide
           */
          searcher_amount: number;
          /**
           * @description The token that the searcher will provide
           * @example EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v
           */
          searcher_token: string;
          /** @enum {string} */
          side_specified: "searcher";
          /**
           * @description The token that the user will provide
           * @example So11111111111111111111111111111111111111112
           */
          user_token: string;
        }
      | {
          /**
           * @description The token that the searcher will provide
           * @example EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v
           */
          searcher_token: string;
          /** @enum {string} */
          side_specified: "user";
          /**
           * Format: int64
           * @description The amount that searcher will receive from the user after deducting fees
           */
          user_amount: number;
          /**
           * Format: int64
           * @description The exact amount that the user will provide, including any fees on the user token side
           */
          user_amount_including_fees: number;
          /**
           * @description The token that the user will provide
           * @example EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v
           */
          user_token: string;
        };
    QuoteV1Svm: {
      /**
       * @description The chain id for the quote.
       * @example solana
       */
      chain_id: string;
      /**
       * Format: int64
       * @description The expiration time of the quote (in seconds since the Unix epoch). Not provided if indicative price.
       * @example 1700000000000000
       */
      expiration_time?: number | null;
      /** @description The token and amount that the user needs to send to fulfill the swap transaction. */
      input_token: components["schemas"]["TokenAmountSvm"];
      /** @description The token and amount that the user will receive when the swap is complete. */
      output_token: components["schemas"]["TokenAmountSvm"];
      /** @description The token and amount of the platform fee paid to the Express Relay program and relayer. */
      platform_fee: components["schemas"]["TokenAmountSvm"];
      /**
       * @description The reference id for the quote.
       * @example beedbeed-58cc-4372-a567-0e02b2c3d479
       */
      reference_id: string;
      /** @description The token and amount of the referral fee paid to the party that routed the swap request to Express Relay. */
      referrer_fee: components["schemas"]["TokenAmountSvm"];
      /**
       * @description The transaction for the quote to be executed on chain which is valid until the expiration time. Not provided if the quote to return is only an indicative price.
       * @example SGVsbG8sIFdvcmxkIQ==
       */
      transaction?: string | null;
    };
    ReferralFeeInfo: {
      /**
       * Format: int32
       * @description The referral fee in basis points.
       * @example 10
       */
      referral_fee_bps: number;
      /**
       * @description The router account to send referral fees to.
       * @example DUcTi3rDyS5QEmZ4BNRBejtArmDCWaPYGfN44vBJXKL5
       */
      router: string;
    };
    ServerResultMessage:
      | {
          result: null | components["schemas"]["APIResponse"];
          /** @enum {string} */
          status: "success";
        }
      | {
          result: string;
          /** @enum {string} */
          status: "error";
        };
    /** @description This enum is used to send the result for a specific client request with the same id.
     *     Id is only None when the client message is invalid. */
    ServerResultResponse: components["schemas"]["ServerResultMessage"] & {
      id?: string | null;
    };
    /** @description This enum is used to send an update to the client for any subscriptions made. */
    ServerUpdateResponse:
      | {
          opportunity: components["schemas"]["Opportunity"];
          /** @enum {string} */
          type: "new_opportunity";
        }
      | {
          status: components["schemas"]["BidStatusWithId"];
          /** @enum {string} */
          type: "bid_status_update";
        }
      | {
          /** @enum {string} */
          type: "svm_chain_update";
          update: components["schemas"]["SvmChainUpdate"];
        }
      | {
          opportunity_delete: components["schemas"]["OpportunityDelete"];
          /** @enum {string} */
          type: "remove_opportunities";
        };
    SpecifiedTokenAmount:
      | {
          /**
           * Format: int64
           * @example 100
           */
          amount: number;
          /** @enum {string} */
          side: "input";
        }
      | {
          /**
           * Format: int64
           * @example 50
           */
          amount: number;
          /** @enum {string} */
          side: "output";
        };
    /** @enum {string} */
    SubmissionFailedReason: "cancelled" | "deadline_passed";
    /** @description Parameters needed to submit a quote from server. */
    SubmitQuote: {
      /**
       * @description The reference id for the quote that should be submitted.
       * @example beedbeed-58cc-4372-a567-0e02b2c3d479
       */
      reference_id: string;
      /**
       * @description The signature of the user for the quote.
       * @example Jb2urXPyEh4xiBgzYvwEFe4q1iMxG1DNxWGGQg94AmKgqFTwLAiTiHrYiYxwHUB4DV8u5ahNEVtMMDm3sNSRdTg
       */
      user_signature: string;
    };
    /** @description Response to a quote submission. */
    SubmitQuoteResponse: {
      /**
       * @description The fully signed versioned transaction that was submitted.
       *     The transaction is encoded in base64.
       * @example SGVsbG8sIFdvcmxkIQ==
       */
      transaction: string;
    };
    SvmChainUpdate: {
      /** @example SLxp9LxX1eE9Z5v99Y92DaYEwyukFgMUF6zRerCF12j */
      blockhash: string;
      /** @example solana */
      chain_id: string;
      /**
       * Format: int64
       * @description The prioritization fee that the server suggests to use for the next transaction
       * @example 1000
       */
      latest_prioritization_fee: number;
    };
    /** @enum {string} */
    TokenAccountInitializationConfig:
      | "unneeded"
      | "searcher_payer"
      | "user_payer";
    TokenAccountInitializationConfigs: {
      /** @description The express relay fee receiver token account */
      express_relay_fee_receiver_ata: components["schemas"]["TokenAccountInitializationConfig"];
      /** @description The relayer fee receiver token account */
      relayer_fee_receiver_ata: components["schemas"]["TokenAccountInitializationConfig"];
      /** @description The router fee receiver token account */
      router_fee_receiver_ta: components["schemas"]["TokenAccountInitializationConfig"];
      /** @description The user token account for the searcher-provided token */
      user_ata_mint_searcher: components["schemas"]["TokenAccountInitializationConfig"];
      /** @description The user token account for the user-provided token */
      user_ata_mint_user: components["schemas"]["TokenAccountInitializationConfig"];
    };
    TokenAmountEvm: {
      /**
       * @description The token amount.
       * @example 1000
       */
      amount: string;
      /**
       * @description The token contract address.
       * @example 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2
       */
      token: string;
    };
    TokenAmountSvm: {
      /**
       * Format: int64
       * @description The token amount, represented in the smallest denomination of that token
       *     (e.g. lamports for SOL).
       * @example 1000
       */
      amount: number;
      /**
       * @description The token mint address.
       * @example EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v
       */
      token: string;
    };
  };
  responses: {
    BidResult: {
      headers: {
        [name: string]: unknown;
      };
      content: {
        "application/json": {
          /**
           * @description The unique id created to identify the bid. This id can be used to query the status of the bid.
           * @example beedbeed-58cc-4372-a567-0e02b2c3d479
           */
          id: string;
          /**
           * @description The status of the request. If the bid was placed successfully, the status will be "OK".
           * @example OK
           */
          status: string;
        };
      };
    };
    Bids: {
      headers: {
        [name: string]: unknown;
      };
      content: {
        "application/json": {
          items: components["schemas"]["Bid"][];
        };
      };
    };
    /** @description An error occurred processing the request */
    ErrorBodyResponse: {
      headers: {
        [name: string]: unknown;
      };
      content: {
        "application/json": {
          error: string;
        };
      };
    };
    Opportunity: {
      headers: {
        [name: string]: unknown;
      };
      content: {
        "application/json":
          | components["schemas"]["OpportunityEvm"]
          | components["schemas"]["OpportunitySvm"];
      };
    };
  };
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
  get_bids_by_time_deprecated: {
    parameters: {
      query?: {
        /** @example 2024-05-23T21:26:57.329954Z */
        from_time?: string | null;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Paginated list of bids for the specified query */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Bids"];
        };
      };
      400: components["responses"]["ErrorBodyResponse"];
    };
  };
  post_bid: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["BidCreate"];
      };
    };
    responses: {
      /** @description Bid was placed successfully */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BidResult"];
        };
      };
      400: components["responses"]["ErrorBodyResponse"];
      /** @description Chain id was not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorBodyResponse"];
        };
      };
    };
  };
  get_bid_status_deprecated: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description Bid id to query for */
        bid_id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BidStatus"];
        };
      };
      400: components["responses"]["ErrorBodyResponse"];
      /** @description Bid was not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorBodyResponse"];
        };
      };
    };
  };
  get_opportunities: {
    parameters: {
      query?: {
        /** @example op_sepolia */
        chain_id?: string | null;
        /** @description Get opportunities in live or historical mode. */
        mode?: components["schemas"]["OpportunityMode"];
        /**
         * @description The permission key to filter the opportunities by. Used only in historical mode.
         * @example 0xdeadbeef
         */
        permission_key?: string | null;
        /**
         * @description The time to get the opportunities from.
         * @example 2024-05-23T21:26:57.329954Z
         */
        from_time?: string | null;
        /**
         * @description The maximum number of opportunities to return. Capped at 100; if more than 100 requested, at most 100 will be returned.
         * @example 20
         */
        limit?: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Array of opportunities ready for bidding */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Opportunity"][];
        };
      };
      400: components["responses"]["ErrorBodyResponse"];
      /** @description Chain id was not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorBodyResponse"];
        };
      };
    };
  };
  post_opportunity: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["OpportunityCreate"];
      };
    };
    responses: {
      /** @description The created opportunity */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Opportunity"];
        };
      };
      400: components["responses"]["ErrorBodyResponse"];
      /** @description Chain id was not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorBodyResponse"];
        };
      };
    };
  };
  delete_opportunities: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["OpportunityDelete"];
      };
    };
    responses: {
      /** @description Opportunities deleted successfully */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      400: components["responses"]["ErrorBodyResponse"];
      /** @description Chain id was not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorBodyResponse"];
        };
      };
    };
  };
  post_quote: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["QuoteCreate"];
      };
    };
    responses: {
      /** @description The created quote */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Quote"];
        };
      };
      400: components["responses"]["ErrorBodyResponse"];
      /** @description No quote available right now */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorBodyResponse"];
        };
      };
    };
  };
  opportunity_bid: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description Opportunity id to bid on */
        opportunity_id: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["OpportunityBidEvm"];
      };
    };
    responses: {
      /** @description Bid Result */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["OpportunityBidResult"];
        };
      };
      400: components["responses"]["ErrorBodyResponse"];
      /** @description Opportunity or chain id was not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorBodyResponse"];
        };
      };
    };
  };
  delete_profile_access_token: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description The token successfully revoked */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      400: components["responses"]["ErrorBodyResponse"];
    };
  };
  get_bids_by_time: {
    parameters: {
      query?: {
        /** @example 2024-05-23T21:26:57.329954Z */
        from_time?: string | null;
      };
      header?: never;
      path: {
        /**
         * @description The chain id to query for
         * @example op_sepolia
         */
        chain_id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Paginated list of bids for the specified query */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Bids"];
        };
      };
      400: components["responses"]["ErrorBodyResponse"];
    };
  };
  get_bid_status: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @example op_sepolia */
        chain_id: string;
        /** @example obo3ee3e-58cc-4372-a567-0e02b2c3d479 */
        bid_id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BidStatus"];
        };
      };
      400: components["responses"]["ErrorBodyResponse"];
      /** @description Bid was not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorBodyResponse"];
        };
      };
    };
  };
  post_cancel_bid: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /**
         * @description The chain id of the bid to cancel.
         * @example solana
         */
        chain_id: string;
        /**
         * @description The id of the bid to cancel.
         * @example obo3ee3e-58cc-4372-a567-0e02b2c3d479
         */
        bid_id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Bid was cancelled successfully */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      400: components["responses"]["ErrorBodyResponse"];
      /** @description Chain id was not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorBodyResponse"];
        };
      };
    };
  };
  post_submit_quote: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /**
         * @description The chain id to submit the quote for
         * @example solana
         */
        chain_id: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SubmitQuote"];
      };
    };
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["SubmitQuoteResponse"];
        };
      };
      400: components["responses"]["ErrorBodyResponse"];
    };
  };
}
